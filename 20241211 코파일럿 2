import sys
import time
from PyQt5 import QtWidgets, QtCore

import GUI_Socket
from GUI_Designer_Controller import Ui_MainWindow

class UdpReceiver(QtCore.QObject):
    data_received = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super().__init__(parent)
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.receive_data)
        self.timer.start(10)

    def receive_data(self):
        message, address = GUI_Socket.readMessage()
        if message is not None:
            self.data_received.emit(message.decode('utf-8'))

class ControllerGUI(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.update_widgets()
        self.currentTime = ''
        self.rxMessage = ''

        self.Client_port_GUI = 0  # GUI 프로그램의 portNumber -> 컨트롤러와 같다
        self.Client_UDP = tuple()  # GUI 프로그램의 IP, portNumber
        self.port_ip = ''  # 컨트롤러의 IP
        self.portNumber = 0  # 컨트롤러의 portNumber
        self.ui.pushButton_IP.clicked.connect(self.enter)

        # region button clicked
        self.ui.Socket_Init_button.clicked.connect(self.Socket_Init_btn_clicked)
        self.ui.Vacuum_on_button.clicked.connect(self.Vac_on_btn_clicked)
        self.ui.Vacuum_off_button.clicked.connect(self.Vac_off_btn_clicked)
        self.ui.Clamp_Open_button.clicked.connect(self.Clamp_open_btn_clicked)
        self.ui.Clamp_Close_button.clicked.connect(self.Clamp_close_btn_clicked)
        self.ui.Rotation_0_button.clicked.connect(self.Rotation_0_btn_clicked)
        self.ui.Rotation_90_button.clicked.connect(self.Rotation_90_btn_clicked)
        self.ui.Socket_Open_button.clicked.connect(self.Socket_open_btn_clicked)
        self.ui.Socket_Close_button.clicked.connect(self.Socket_close_btn_clicked)
        # end region

        self.udp_receiver = UdpReceiver()
        self.udp_receiver.data_received.connect(self.update_rx_browser)

    def enter(self):
        self.port_ip = str(self.ui.lineEdit_IP.text())
        self.portNumber = int(self.ui.lineEdit_portNumber.text())
        GUI_Socket.init(ipAddress=self.port_ip, portNumber=self.portNumber)
        self.Client_port_GUI = self.portNumber
        self.Client_UDP = ('166.79.25.100', self.Client_port_GUI)
        self.ui.textBrowser_tx.append('PC IP: 166.79.25.100' + ' PC Port Number:' + self.ui.lineEdit_portNumber.text())
        self.ui.textBrowser_rx.append('Port IP:' + self.ui.lineEdit_IP.text() + ' Port Number:' + self.ui.lineEdit_portNumber.text())

    def Socket_Init_btn_clicked(self):
        GUI_Socket.sendMessage('H2000000', self.Client_UDP)
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_tx.append(self.currentTime + ' ==> ' + 'H2000000')

    def Vac_on_btn_clicked(self):
        GUI_Socket.sendMessage('H1001000', self.Client_UDP)
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_tx.append(self.currentTime + ' ==> ' + 'H1001000')

    def Vac_off_btn_clicked(self):
        GUI_Socket.sendMessage('H1000000', self.Client_UDP)
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_tx.append(self.currentTime + ' ==> ' + 'H1000000')

    def Clamp_open_btn_clicked(self):
        GUI_Socket.sendMessage('H1101000', self.Client_UDP)
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_tx.append(self.currentTime + ' ==> ' + 'H1101000')

    def Clamp_close_btn_clicked(self):
        GUI_Socket.sendMessage('H1100000', self.Client_UDP)
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_tx.append(self.currentTime + ' ==> ' + 'H1100000')

    def Rotation_0_btn_clicked(self):
        GUI_Socket.sendMessage('H1300000', self.Client_UDP)
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_tx.append(self.currentTime + ' ==> ' + 'H1300000')

    def Rotation_90_btn_clicked(self):
        GUI_Socket.sendMessage('H1301000', self.Client_UDP)
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_tx.append(self.currentTime + ' ==> ' + 'H1301000')

    def Socket_open_btn_clicked(self):
        GUI_Socket.sendMessage('H1201000', self.Client_UDP)
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_tx.append(self.currentTime + ' ==> ' + 'H1201000')

    def Socket_close_btn_clicked(self):
        GUI_Socket.sendMessage('H1200000', self.Client_UDP)
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_tx.append(self.currentTime + ' ==> ' + 'H1200000')

    def update_rx_browser(self, message):
        self.currentTime = time.ctime()[11:19]
        self.ui.textBrowser_rx.append(self.currentTime + ' ==> ' + message)

    def update_widgets(self):
        self.setWindowTitle('PyQt5 GUI')

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = ControllerGUI()
    window.show()
    sys.exit(app.exec_())
